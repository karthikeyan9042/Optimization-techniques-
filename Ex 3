from numpy import asarray
from numpy import exp
from numpy.random import randn
from numpy.random import rand
from numpy.random import seed
def objective(x):
    return x[0]**2.0
def sim(objective,bounds,n_iterations,step_size,temp):
    best=bounds[:,0]+rand(len(bounds))*(bounds[:,1]-bounds[:,0])
    best_eval=objective(best)
    curr,curr_eval=best,best_eval
    for i in range(n_iterations):
        candidate=curr+randn(len(bounds))*step_size
        candidate_eval=objective(candidate)
        if candidate_eval<best_eval:
            best,best_eval=candidate,candidate_eval
            print(f'>iteration %d:f(%s)=%.5f'%(i,best,best_eval))
            diff=candidate_eval-curr_eval
            t=temp/float(i+1)
            metropolis=exp(-diff/t)
            if diff<0 or rand()<metropolis:
                curr,curr_eval=candidate,candidate_eval
    return [best,best_eval]
seed(1)
bounds=asarray([[-0.5,5.0]])
n_iteration=1000
step_size=0.1
temp=10
print('starting simulated annealing completed')
best,score=sim(objective,bounds,n_iteration,step_size,temp)
print('\nsimulated annealing completed')
print(f'best solution:{best}')
print(f'fitness score of the best solution:{score:5f}')
